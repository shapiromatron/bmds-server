name: ci-checks

on: [pull_request]

jobs:
  backend:
    name: backend
    runs-on: ubuntu-20.04

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: bmds
          POSTGRES_PASSWORD: password
          POSTGRES_DB: bmds-online-test
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
        - 5432/tcp

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: try to restore pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: install
      run: |
        mv tests/data/ci-webpack-stats.json bmds_server/webpack-stats.json
        pip install -U pip wheel
        pip install -r requirements/ci.txt
    - name: lint
      run: |
        make lint-py
    - name: test
      env:
        DJANGO_DB_NAME: bmds-online-test
        DJANGO_DB_USER: bmds
        DJANGO_DB_PW: password
        DJANGO_DB_HOST: localhost
        DJANGO_DB_PORT: ${{ job.services.postgres.ports[5432] }} # get randomly assigned published port
      run: |
        py.test --vcr-record=none

  frontend:
    name: frontend
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-node@v2
      with:
        node-version: '16.x'
    - name: install
      run: |
        yarn --cwd ./frontend install
    - name: lint
      run: |
        make lint-js
    - name: build for integration tests
      run: |
        npm --prefix ./frontend run build
    - name: Upload webpack build
      uses: actions/upload-artifact@v2
      with:
        name: webpack-build
        path: |
          bmds_server/webpack-stats.json
          bmds_server/static/bundles/

  integration:
    name: integration
    needs: [backend, frontend]
    runs-on: ubuntu-20.04

    container:
      image: python:3.9-slim
      options: --network-alias container

    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: bmds
          POSTGRES_PASSWORD: password
          POSTGRES_DB: bmds-online-test
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

      selenium-server:
        image: selenium/standalone-firefox:latest
        ports:
        - 4444:4444

    env:
      DJANGO_DB_HOST: postgres
      DJANGO_DB_NAME: bmds-online-test
      DJANGO_DB_PORT: 5432
      DJANGO_DB_PW: password
      DJANGO_DB_USER: bmds
      BMDS_INTEGRATION_TESTS: 1
      BROWSER: firefox
      LIVESERVER_HOST: container
      LIVESERVER_PORT: 8000
      SELENIUM_HOST: selenium-server
      SELENIUM_PORT: 4444

    steps:
    - uses: actions/checkout@v2
    - name: try to restore pip cache
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Download webpack build
      uses: actions/download-artifact@v2
      with:
        name: webpack-build
        path: bmds_server
    - name: install
      run: |
        apt-get update
        apt-get install -y git
        pip install -U pip
        pip install -r requirements/ci.txt
    # https://github.community/t/how-to-retry-a-failed-step-in-github-actions-workflow/125880
    - name: run selenium tests
      id: test
      continue-on-error: true
      run: |
        py.test -sv tests/integration/
    - name: run selenium tests (retry)
      if: steps.test.outcome=='failure'
      id: retry
      continue-on-error: true
      run: |
        py.test -sv tests/integration/
    - name: set status
      if: always()
      run: |
        if ${{ steps.test.outcome=='success' || steps.retry.outcome=='success' }}; then
          echo success!
        else
          exit 1
        fi
