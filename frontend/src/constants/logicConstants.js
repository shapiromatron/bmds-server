import _ from "lodash";
import {toJS} from "mobx";

export const RULES = Object.freeze({
        BMD_MISSING: "bmd_missing",
        BMDL_MISSING: "bmdl_missing",
        BMDU_MISSING: "bmdu_missing",
        AIC_MISSING: "aic_missing",
        ROI_MISSING: "roi_missing",
        VARIANCE_TYPE: "variance_type",
        VARIANCE_FIT: "variance_fit",
        GOF: "gof",
        GOF_CANCER: "gof_cancer",
        BMD_BMDL_RATIO_FAIL: "bmd_bmdl_ratio_fail",
        BMD_BMDL_RATIO_WARN: "bmd_bmdl_ratio_warn",
        ROI_LARGE: "roi_large",
        WARNINGS: "warnings",
        HIGH_BMD: "high_bmd",
        HIGH_BMDL: "high_bmdl",
        LOW_BMD_WARN: "low_bmd_warn",
        LOW_BMDL_WARN: "low_bmdl_warn",
        LOW_BMD_FAIL: "low_bmd_fail",
        LOW_BMDL_FAIL: "low_bmdl_fail",
        CONTROL_RESIDUAL_HIGH: "control_residual_high",
        CONTROL_STDEV_FIT: "control_stdev_fit",
        DOF_ZERO: "dof_zero",
    }),
    ruleOrder = [
        RULES.BMD_MISSING,
        RULES.BMDL_MISSING,
        RULES.BMDU_MISSING,
        RULES.AIC_MISSING,
        RULES.ROI_MISSING,
        RULES.VARIANCE_TYPE,
        RULES.VARIANCE_FIT,
        RULES.GOF,
        RULES.GOF_CANCER,
        RULES.BMD_BMDL_RATIO_FAIL,
        RULES.BMD_BMDL_RATIO_WARN,
        RULES.ROI_LARGE,
        RULES.WARNINGS,
        RULES.HIGH_BMD,
        RULES.HIGH_BMDL,
        RULES.LOW_BMD_WARN,
        RULES.LOW_BMDL_WARN,
        RULES.LOW_BMD_FAIL,
        RULES.LOW_BMDL_FAIL,
        RULES.CONTROL_RESIDUAL_HIGH,
        RULES.CONTROL_STDEV_FIT,
        RULES.DOF_ZERO,
    ],
    ruleLookups = {
        [RULES.BMD_MISSING]: {
            notes: val => "BMD not estimated",
            name: "BMD calculated",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.BMDL_MISSING]: {
            name: "BMDL calculated",
            notes: val => "BMDL not estimated",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.BMDU_MISSING]: {
            name: "BMDU calculated",
            notes: val => "BMDU not estimated",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.AIC_MISSING]: {
            name: "AIC calculated",
            notes: val => "AIC not estimated",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.ROI_MISSING]: {
            name: "Residual of Interest calculated",
            notes: val => "To Do",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.VARIANCE_TYPE]: {
            notes: val => `Constant variance test failed (Test 2 p-value < ${val})`,
            name: "Constant Variance",
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: false,
            enabledNested: false,
        },
        [RULES.VARIANCE_FIT]: {
            name: "Non-Constant Variance",
            notes: val => `Non-Constant variance test failed (Test 3 p-value < ${val})`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: false,
            enabledNested: false,
        },
        [RULES.GOF]: {
            name: "Goodness of fit p-test",
            notes: val => `Goodness of fit p-value < ${val} `,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.GOF_CANCER]: {
            name: "Goodness of fit p-test (cancer)",
            notes: val => `BGoodness of fit p-value < ${val}`,
            hasThreshold: true,
            enabledContinuous: false,
            enabledDichotomous: true,
            enabledNested: false,
        },
        [RULES.BMD_BMDL_RATIO_FAIL]: {
            name: "Ratio of BMD/BMDL (serious)",
            notes: val => `BMD/BMDL ratio > ${val}`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.BMD_BMDL_RATIO_WARN]: {
            name: `Ratio of BMD/BMDL (caution)`,
            notes: val => `BMD/BMDL ratio > ${val}`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.ROI_LARGE]: {
            name: "Abs(Residual of interest) too large",
            notes: val => `|Residual for Dose Group Near BMD| > ${val}`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.WARNINGS]: {
            name: "BMDS model Warning",
            notes: val => "BMD output file included warning",
            hasThreshold: false,
            enabledContinuous: false,
            enabledDichotomous: false,
            enabledNested: false,
        },
        [RULES.HIGH_BMD]: {
            name: "BMD higher than higher dose",
            notes: val => `BMD ${val}x higher than maximum dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.HIGH_BMDL]: {
            name: "BMDL higher than highest dose",
            notes: val => `BMDL ${val}x higher than maximum dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.LOW_BMD_WARN]: {
            name: "BMD lower than lowest dose (warning)",
            notes: val => `BMD ${val}x lower than lowest non-zero dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.LOW_BMDL_WARN]: {
            name: "BMDL lower than lowest dose (warning)",
            notes: val => `BMDL ${val}x lower than lowest non-zero dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.LOW_BMD_FAIL]: {
            name: "BMD lower than lowest dose (serious)",
            notes: val => `BMD ${val}x lower than lowest non-zero dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.LOW_BMDL_FAIL]: {
            name: "BMDL lower than lowest dose (serious)",
            notes: val => `BMDL ${val}x lower than lowest non-zero dose`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.CONTROL_RESIDUAL_HIGH]: {
            name: "Abs(Residual at control) too large",
            notes: val => `|Residual at control| > ${val}`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
        [RULES.CONTROL_STDEV_FIT]: {
            name: "Poor control dose std. dev.",
            notes: val => `Modeled control response std. dev. > |${val}| actual response std. dev`,
            hasThreshold: true,
            enabledContinuous: true,
            enabledDichotomous: false,
            enabledNested: false,
        },
        [RULES.DOF_ZERO]: {
            name: "D.O.F equal 0",
            notes: val => "d.f=0, saturated model (Goodness of fit test cannot be calculated)",
            hasThreshold: false,
            enabledContinuous: true,
            enabledDichotomous: true,
            enabledNested: true,
        },
    },
    BINS = Object.freeze({
        NO_CHANGE: 0,
        WARNING: 1,
        FAILURE: 2,
    }),
    BIN_NAMES = {
        [BINS.NO_CHANGE]: "No bin change (warning)",
        [BINS.WARNING]: "Questionable bin",
        [BINS.FAILURE]: "Unusable bin",
    },
    BIN_LABELS = {
        [BINS.NO_CHANGE]: "Viable",
        [BINS.WARNING]: "Questionable",
        [BINS.FAILURE]: "Unusable",
    },
    getModelBinLabel = function(output, index) {
        if (output.recommender.results.recommended_model_index == index) {
            return `Recommended - ${output.recommender.results.recommended_model_variable.toUpperCase()}`;
        }
        return BIN_LABELS[output.recommender.results.model_bin[index]];
    },
    getModelBinText = function(output, index) {
        return _.chain(toJS(output.recommender.results.model_notes[index]))
            .values()
            .flattenDeep()
            .value();
    };
